@page "/Create"
@page "/Create/{prioridadId:int}"
@inject PrioridadesService prioridadesService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>Registro de Prioridades</PageTitle>
<EditForm Model="Prioridad" OnValidSubmit="Guardar" FormName="prioridadForm">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Crear Prioridades</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                        <label for="PrioridadId">Prioridad Id:</label>
                        <div class="id-input">
                            <InputNumber @bind-Value="Prioridad.PrioridadId" class="form-control" aria-describedby="BotonBuscar" />

                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripci&oacute;n:</label>
                    <InputText @bind-Value="Prioridad.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Prioridad.Descripcion)" />
                </div>
                @if (Existe)
                {
                    <div class="alert alert-danger" role="alert">
                        Ya existe una prioridad con esa descripción
                    </div>
                }
                <div class="mb-3">
                    <label class="form-label" for="DiasCompromiso">D&iacute;as Compromiso:</label>
                    <InputNumber @bind-Value="Prioridad.DiasCompromiso" class="form-control" />
                    <ValidationMessage For="@(() => Prioridad.DiasCompromiso)" />
                </div>
                @if (Guardo)
                {
                    <p class="text-success">
                        La prioridad se guardó exitosamente
                    </p>
                }
                @if (Elimino)
                {
                    <p class="text-success">
                        La prioridad se eliminó exitosamente
                    </p>
                }
            </div>
            <div class="card-footer d-flex justify-content-between">
                <button type="button" class="btn btn-primary" @onclick="() => Guardar()">
                    <span>Crear <i class="bi bi-file-earmark" /></span>
                </button>
                <a href="/Details" class="btn btn-secondary">
                    <span>Volver a Consulta</span> <i class="bi bi-arrow-return-left" />
                </a>
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? prioridadId { get; set; }
    public Prioridades Prioridad { get; set; } = new Prioridades();
    public string Mensaje { get; set; } = string.Empty;
    public bool Existe { get; set; } = false;
    public bool Guardo { get; set; } = false;
    public bool Elimino { get; set; } = false;
    public bool Encontro { get; set; } = false;

    protected override void OnInitialized()
    {
        if (prioridadId.HasValue)
        {
            Prioridad.PrioridadId = prioridadId.Value;
            Buscar();
        }
    }

    public async Task Buscar()
    {
        var encontrado = await prioridadesService.Buscar(Prioridad.PrioridadId);
        if (encontrado != null)
            Prioridad = encontrado;

        Encontro = true;
    }

    public void Guardar()
    {
        if (Validar())
            return;

        var guardo = prioridadesService.Guardar(this.Prioridad);
        Guardo = true;
        navigationManager.NavigateTo("Details");
        Nuevo();

    }

    public void Nuevo()
    {
        this.Prioridad = new Prioridades();
        Mensaje = string.Empty;
    }

    public bool Validar()
    {
        Existe = (prioridadesService.Listar(pr => pr.Descripcion!.ToLower() == Prioridad.Descripcion!.ToLower() && pr.PrioridadId != Prioridad.PrioridadId).Any());
        return Existe;
    }

    public async Task Eliminar()
    {
        var eliminado = prioridadesService.Eliminar(Prioridad.PrioridadId);
        Elimino = true;
        Nuevo();
    }
}
